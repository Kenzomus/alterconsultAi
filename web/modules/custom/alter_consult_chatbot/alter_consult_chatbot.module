<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function alter_consult_chatbot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.alter_consult_chatbot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('AI-powered chatbot for collecting project information and providing estimates.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function alter_consult_chatbot_page_attachments(array &$attachments) {
  // Add chatbot assets to all pages except admin pages.
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'alter_consult_chatbot/chatbot';
    $attachments['#attached']['drupalSettings']['alterConsultChatbot'] = [
      'apiEndpoint' => '/api/chatbot',
      'initialMessage' => t('Hello! I\'m your AI assistant. How can I help you with your project today?'),
    ];
  }
}

/**
 * Implements hook_theme().
 */
function alter_consult_chatbot_theme() {
  return [
    'alter_consult_chatbot' => [
      'variables' => [
        'content' => NULL,
      ],
      'template' => 'alter-consult-chatbot',
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function alter_consult_chatbot_menu() {
  $items['api/chatbot'] = [
    'title' => 'Chatbot API',
    'page callback' => 'alter_consult_chatbot_api_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * API callback for chatbot.
 */
function alter_consult_chatbot_api_callback() {
  $response = new \Symfony\Component\HttpFoundation\JsonResponse();

  // Get the message from the request
  $message = \Drupal::request()->request->get('message');
  $conversation_id = \Drupal::request()->request->get('conversation_id');

  // Get conversation history if conversation_id is provided
  $conversation = [];
  if ($conversation_id) {
    $conversation = alter_consult_chatbot_get_conversation($conversation_id);
  }

  // Process the message and generate response
  $ai_response = alter_consult_chatbot_process_message($message, $conversation);

  // Store the conversation in the database
  $conversation_id = alter_consult_chatbot_store_conversation($message, $ai_response);

  $response->setData([
    'response' => $ai_response,
    'conversation_id' => $conversation_id,
    'timestamp' => time(),
  ]);

  return $response;
}

/**
 * Process the user message and generate AI response.
 */
function alter_consult_chatbot_process_message($message, array $conversation = []) {
  // Initialize services
  $openai_service = \Drupal::service('alter_consult_chatbot.openai');
  $project_estimation_service = \Drupal::service('alter_consult_chatbot.project_estimation');

  try {
    // Add the new message to the conversation
    $conversation[] = [
      'role' => 'user',
      'content' => $message,
    ];

    // Check if we have enough information to generate an estimate
    if (count($conversation) >= 3) {
      // Extract project information from the conversation
      $project_info = $project_estimation_service->extractProjectInfo($conversation);

      // Generate project estimate
      $estimate = $project_estimation_service->generateEstimate($project_info);

      // Format the estimate as a response
      $response = t('Based on our conversation, I\'ve prepared a detailed project estimate for you:

Project Summary: @summary

Timeline:
- Total Duration: @duration
@phases

Cost Estimate:
- Range: @min - @max
@breakdown

Team Requirements:
@team

Technical Requirements:
@tech

Risks and Mitigation:
@risks

Would you like me to explain any part of this estimate in more detail?', [
        '@summary' => $estimate['project_summary'],
        '@duration' => $estimate['timeline']['total_duration'],
        '@phases' => implode("\n", array_map(function($phase) {
          return "- {$phase['name']}: {$phase['duration']}";
        }, $estimate['timeline']['phases'])),
        '@min' => $estimate['cost_estimate']['range']['min'],
        '@max' => $estimate['cost_estimate']['range']['max'],
        '@breakdown' => implode("\n", array_map(function($key, $value) {
          return "- {$key}: {$value}";
        }, array_keys($estimate['cost_estimate']['breakdown']), $estimate['cost_estimate']['breakdown'])),
        '@team' => implode("\n", array_map(function($role) {
          return "- {$role}";
        }, $estimate['team_requirements']['roles'])),
        '@tech' => implode("\n", array_map(function($key, $value) {
          return "- {$key}: " . implode(", ", $value);
        }, array_keys($estimate['technical_requirements']), $estimate['technical_requirements'])),
        '@risks' => implode("\n", array_map(function($risk) {
          return "- {$risk['risk']}\n  Mitigation: {$risk['mitigation']}";
        }, $estimate['risks_and_mitigation'])),
      ]);

      return $response;
    }

    // If we don't have enough information yet, continue the conversation
    return $openai_service->processMessage($message);
  }
  catch (\Exception $e) {
    \Drupal::logger('alter_consult_chatbot')->error($e->getMessage());
    return t('I apologize, but I\'m having trouble processing your request right now. Please try again later.');
  }
}

/**
 * Get conversation history.
 */
function alter_consult_chatbot_get_conversation($conversation_id) {
  $database = \Drupal::database();
  $conversation = [];

  $result = $database->select('alter_consult_chatbot_conversations', 'c')
    ->fields('c', ['user_message', 'ai_response'])
    ->condition('id', $conversation_id)
    ->orderBy('timestamp', 'ASC')
    ->execute();

  foreach ($result as $record) {
    $conversation[] = [
      'role' => 'user',
      'content' => $record->user_message,
    ];
    $conversation[] = [
      'role' => 'assistant',
      'content' => $record->ai_response,
    ];
  }

  return $conversation;
}

/**
 * Store the conversation in the database.
 */
function alter_consult_chatbot_store_conversation($user_message, $ai_response) {
  $database = \Drupal::database();

  return $database->insert('alter_consult_chatbot_conversations')
    ->fields([
      'user_message' => $user_message,
      'ai_response' => $ai_response,
      'timestamp' => time(),
      'uid' => \Drupal::currentUser()->id(),
      'ip_address' => \Drupal::request()->getClientIp(),
    ])
    ->execute();
}