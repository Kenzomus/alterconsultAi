name: Test and Deploy to Pantheon Dev

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Clean up Composer environment
        run: |
          rm -rf vendor
          rm -f composer.lock
          rm -rf /home/runner/.cache/composer

      - name: Install PHP 8.3 and extensions manually
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update
          sudo apt install -y php8.3 php8.3-cli php8.3-common php8.3-curl php8.3-gd php8.3-intl php8.3-mbstring php8.3-mysql php8.3-opcache php8.3-xml php8.3-zip php8.3-soap php8.3-bcmath php8.3-exif php8.3-ftp php8.3-gettext php8.3-pdo php8.3-xmlrpc php8.3-sqlite3 php8.3-pgsql php8.3-redis php8.3-imagick php8.3-gmp php8.3-ldap php8.3-apcu
          sudo update-alternatives --set php /usr/bin/php8.3

      - name: Prepare Composer
        run: |
          curl -sS https://getcomposer.org/installer | /usr/bin/php8.3 -- --install-dir=/usr/local/bin --filename=composer
          /usr/bin/php8.3 /usr/local/bin/composer self-update --stable
          /usr/bin/php8.3 /usr/local/bin/composer clear-cache
          /usr/bin/php8.3 /usr/local/bin/composer validate

      - name: Allow phpstan/extension-installer
        run: /usr/bin/php8.3 /usr/local/bin/composer config allow-plugins.phpstan/extension-installer true

      - name: Allow dealerdirect/phpcodesniffer-composer-installer
        run: /usr/bin/php8.3 /usr/local/bin/composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true

      - name: Install Dependencies
        run: |
          echo "Debugging PHP and Composer versions within Install Dependencies step:"
          php -v
          which php
          composer --version
          which composer
          /usr/bin/php8.3 /usr/local/bin/composer install --prefer-dist --no-progress --no-ansi --ignore-platform-reqs --no-plugins

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit || true

      - name: Run PHPCS
        run: vendor/bin/phpcs || true

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse || true

      - name: Run Security Check
        run: vendor/bin/local-php-security-checker check || true

  deploy:
    needs: test
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-24.04
    environment:
      name: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Clean up Composer environment
        run: |
          rm -rf vendor
          rm -f composer.lock
          rm -rf /home/runner/.cache/composer

      - name: Update apt cache and clean
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt clean

      - name: Install PHP 8.3 and extensions manually (Deploy Job)
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update
          sudo apt install -y php8.3 php8.3-cli php8.3-common php8.3-curl php8.3-gd php8.3-intl php8.3-mbstring php8.3-mysql php8.3-opcache php8.3-xml php8.3-zip php8.3-soap php8.3-bcmath php8.3-exif php8.3-ftp php8.3-gettext php8.3-pdo php8.3-xmlrpc php8.3-sqlite3 php8.3-pgsql php8.3-redis php8.3-imagick php8.3-gmp php8.3-ldap php8.3-apcu
          sudo update-alternatives --set php /usr/bin/php8.3

      - name: Prepare Composer (Deploy Job)
        run: |
          curl -sS https://getcomposer.org/installer | /usr/bin/php8.3 -- --install-dir=/usr/local/bin --filename=composer
          /usr/bin/php8.3 /usr/local/bin/composer self-update --stable
          /usr/bin/php8.3 /usr/local/bin/composer clear-cache
          /usr/bin/php8.3 /usr/local/bin/composer validate

      - name: Allow phpstan/extension-installer
        run: /usr/bin/php8.3 /usr/local/bin/composer config allow-plugins.phpstan/extension-installer true

      - name: Allow dealerdirect/phpcodesniffer-composer-installer (Deploy Job)
        run: /usr/bin/php8.3 /usr/local/bin/composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true

      - name: Install Dependencies
        run: /usr/bin/php8.3 /usr/local/bin/composer install --prefer-dist --no-dev --optimize-autoloader --no-ansi --ignore-platform-reqs --no-plugins

      - name: Set up Terminus
        run: |
          curl -L -f -O https://github.com/pantheon-systems/terminus/releases/download/4.0.1/terminus.phar
          chmod +x terminus.phar
          sudo mv terminus.phar /usr/local/bin/terminus
          ls -lh /usr/local/bin/terminus
          file /usr/local/bin/terminus
          head /usr/local/bin/terminus

      - name: Authenticate with Pantheon
        run: terminus auth:login --machine-token=${{ secrets.PANTHEON_MACHINE_TOKEN }}
        env:
          TERMINUS_ALLOW_UNSUPPORTED_NEWER_PHP: 1

      - name: Add Pantheon SSH host keys
        run: |
          set -x
          PANTHEON_CODESERVER_HOST="codeserver.dev.${{ secrets.PANTHEON_SITE }}.drush.in"

          echo "Attempting to add Pantheon SSH host keys..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Add host keys with retries
          for i in {1..3}; do
            echo "Attempt $i to add SSH host keys..."
            ssh-keyscan -H -p 2222 $PANTHEON_CODESERVER_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
            sleep 2
          done

          echo "Contents of known_hosts:"
          cat ~/.ssh/known_hosts
          echo "Finished adding Pantheon SSH host keys."

      - name: Deploy code to Pantheon using Terminus
        run: |
          set -x

          # Explicitly enable SSH agent forwarding for Git
          export GIT_SSH_COMMAND="ssh -A"

          echo "Setting connection mode to Git..."
          /usr/bin/php8.3 $(which terminus) connection:set ${{ secrets.PANTHEON_SITE }}.dev git

          echo "Creating a temporary directory for the deployment..."
          TEMP_DIR=$(mktemp -d)
          rsync -av --exclude='.git/' --exclude='.github/' ./ $TEMP_DIR/
          cd $TEMP_DIR

          echo "Contents of TEMP_DIR after rsync and cd:"
          ls -al

          echo "Initializing git repository..."
          git init
          echo "git init exit code: $?"
          git checkout -b main
          echo "git checkout -b main exit code: $?"

          git add .
          echo "git add exit code: $?"

          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"

          git commit -m "Deploy from GitHub Actions"
          COMMIT_EXIT_CODE=$?
          echo "git commit exit code: $COMMIT_EXIT_CODE"

          if [ "$COMMIT_EXIT_CODE" -ne 0 ]; then
            echo "Error: git commit failed with exit code $COMMIT_EXIT_CODE. This might be why 'main' branch is not found." >&2
            exit 1
          fi

          echo "Local repository status before push:"
          git status
          echo "Local repository log before push:"
          git log --oneline
          echo "Local branches before push:"
          git branch -a
          echo "Current HEAD ref:"
          git rev-parse HEAD || true
          echo "Git Reflog:"
          git reflog

          HEAD_SHA=$(git rev-parse HEAD)
          echo "Resolved HEAD SHA: $HEAD_SHA"

          if [ -z "$HEAD_SHA" ]; then
            echo "Error: Could not resolve HEAD to a SHA. Aborting push." >&2
            exit 1
          fi

          echo "Adding Pantheon remote..."
          git remote remove pantheon || true
          git remote add pantheon ssh://codeserver.dev.${{ secrets.PANTHEON_SITE }}@codeserver.dev.${{ secrets.PANTHEON_SITE }}.drush.in:2222/~/repository.git

          echo "Pushing to Pantheon..."
          for i in {1..3}; do
            echo "Push attempt $i..."
            if git push pantheon $HEAD_SHA:master --force; then
              echo "Push successful!"
              break
            else
              echo "Push attempt $i failed"
              if [ $i -eq 3 ]; then
                echo "All push attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done
        env:
          TERMINUS_ALLOW_UNSUPPORTED_NEWER_PHP: 1

      - name: Run database updates and configuration import
        run: |
          set -x
          echo "Running database updates..."
          /usr/bin/php8.3 $(which terminus) drush ${{ secrets.PANTHEON_SITE }}.dev -- updb -y || echo "Database updates failed but continuing..."

          echo "Importing configuration..."
          /usr/bin/php8.3 $(which terminus) drush ${{ secrets.PANTHEON_SITE }}.dev -- cim -y || echo "Config import failed but continuing..."

          echo "Clearing cache..."
          /usr/bin/php8.3 $(which terminus) drush ${{ secrets.PANTHEON_SITE }}.dev -- cr || echo "Cache clear failed but continuing..."

          echo "Running cron..."
          /usr/bin/php8.3 $(which terminus) drush ${{ secrets.PANTHEON_SITE }}.dev -- cron || echo "Cron failed but continuing..."